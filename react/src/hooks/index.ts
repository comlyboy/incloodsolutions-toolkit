export * from './useKeyEvent';
export * from './usePageMetadata';
export * from './useCustomNavigation';

export * from 'usehooks-ts';

export type { TernaryDarkMode, DebouncedState, TernaryDarkModeOptions, TernaryDarkModeReturn } from 'usehooks-ts';

export {
	// Renamed to avoid conflicts
	useBoolean as useBoolean2,
	useCopyToClipboard as useCopyToClipboard2,
	useCounter as useCounter2,
	useHover as useHover2,
	useInterval as useInterval2,

	// Sensors
	useBattery,
	useGeolocation,
	useHoverDirty,
	useHash,
	useIdle,
	useIntersection,
	useKey,
	useKeyPress,
	useKeyPressEvent,
	useLocation,
	useSearchParam,
	useLongPress,
	useMedia,
	useMediaDevices,
	useMotion,
	useMouse,
	useMouseHovered,
	useMouseWheel,
	useNetworkState,
	useOrientation,
	usePageLeave,
	useScratch,
	useScroll,
	useScrolling,
	useStartTyping,
	useWindowScroll,
	useWindowSize,
	useMeasure,
	useSize,
	createBreakpoint,
	useScrollbarWidth,
	usePinchZoom,

	// UI Utilities
	useAudio,
	useClickAway,
	useCss,
	useDrop,
	useDropArea,
	useFullscreen,
	useSlider,
	useSpeech,
	useVibrate,
	useVideo,

	// Animations
	useRaf,
	useHarmonicIntervalFn,
	useTimeout,
	useTimeoutFn,
	useTween,
	useUpdate,

	// Side-Effects
	useAsync,
	useAsyncFn,
	useAsyncRetry,
	useBeforeUnload,
	useCookie,
	useDebounce,
	useError,
	useFavicon,
	useLocalStorage,
	useLockBodyScroll,
	useRafLoop,
	useSessionStorage,
	useThrottle,
	useThrottleFn,
	useTitle,
	usePermission,

	// Lifecycles
	useEffectOnce,
	useEvent,
	useLifecycles,
	useMountedState,
	useUnmountPromise,
	usePromise,
	useLogger,
	useMount,
	useUnmount,
	useUpdateEffect,
	useIsomorphicLayoutEffect,
	useDeepCompareEffect,
	useShallowCompareEffect,
	useCustomCompareEffect,

	// State Utilities
	createMemo,
	createReducer,
	createReducerContext,
	createStateContext,
	useDefault,
	useGetSet,
	useGetSetState,
	useLatest,
	usePrevious,
	usePreviousDistinct,
	useObservable,
	useRafState,
	useSetState,
	useStateList,
	useToggle,
	useNumber,
	useList,
	useMap,
	useSet,
	useQueue,
	useStateValidator,
	useStateWithHistory,
	useMultiStateValidator,
	useMediatedState,
	useFirstMountState,
	useRendersCount,
	createGlobalState,
	useMethods,

	// Misc
	useEnsuredForwardedRef,
	ensuredForwardRef
} from 'react-use';
